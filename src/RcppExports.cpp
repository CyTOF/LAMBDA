// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// softmax
arma::rowvec softmax(const arma::rowvec& x);
RcppExport SEXP _LAMBDA_softmax(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(softmax(x));
    return rcpp_result_gen;
END_RCPP
}
// mixGaussEM
Rcpp::List mixGaussEM(arma::mat Y, arma::mat X, int L, arma::mat muini, arma::mat betaini, arma::cube Sigmaini, const double& tau, const double& nu, const arma::mat& Lambda, int num_iter);
RcppExport SEXP _LAMBDA_mixGaussEM(SEXP YSEXP, SEXP XSEXP, SEXP LSEXP, SEXP muiniSEXP, SEXP betainiSEXP, SEXP SigmainiSEXP, SEXP tauSEXP, SEXP nuSEXP, SEXP LambdaSEXP, SEXP num_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type muini(muiniSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betaini(betainiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Sigmaini(SigmainiSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< int >::type num_iter(num_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(mixGaussEM(Y, X, L, muini, betaini, Sigmaini, tau, nu, Lambda, num_iter));
    return rcpp_result_gen;
END_RCPP
}
// mixtruncGaussEM
Rcpp::List mixtruncGaussEM(const arma::mat& Y, const arma::mat& X, const int& L, const arma::mat& muini, const arma::mat& betaini, const arma::cube& Sigmaini, const arma::mat& wini, const double& tau, const double& nu, const arma::mat& Lambda, const int& num_iter);
RcppExport SEXP _LAMBDA_mixtruncGaussEM(SEXP YSEXP, SEXP XSEXP, SEXP LSEXP, SEXP muiniSEXP, SEXP betainiSEXP, SEXP SigmainiSEXP, SEXP winiSEXP, SEXP tauSEXP, SEXP nuSEXP, SEXP LambdaSEXP, SEXP num_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type muini(muiniSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type betaini(betainiSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Sigmaini(SigmainiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wini(winiSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_iter(num_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(mixtruncGaussEM(Y, X, L, muini, betaini, Sigmaini, wini, tau, nu, Lambda, num_iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LAMBDA_softmax", (DL_FUNC) &_LAMBDA_softmax, 1},
    {"_LAMBDA_mixGaussEM", (DL_FUNC) &_LAMBDA_mixGaussEM, 10},
    {"_LAMBDA_mixtruncGaussEM", (DL_FUNC) &_LAMBDA_mixtruncGaussEM, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_LAMBDA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
